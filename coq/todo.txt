1. the capability of sync and async, and the mixture. 
2. rewrite the code with a stateToEff function and a cut function. 
3. finish the aximatic rule first. 
4. small step semantics. 
5. quad big step spec. 

==========

module Blank where

-- this is simply, a blank file.
{-@
twice :: forall < gpost :: a -> a -> Bool
              , gpre :: a -> Bool
              , twicepre :: a -> Bool
              , twicepost :: a -> a -> Bool
              >.
       {x::a<gpre>, w::a<gpost x> |- a<gpost w> <: a<twicepost x>}
       {x::a<twicepre> |- a<gpost x> <: a<gpre>}
       {x::a<twicepre> |- a<twicepre> <: a<gpre>}
       g:(z:a<gpre> -> a<gpost z>)
    -> x:a<twicepre> -> a<twicepost x>
@-}
twice g x = g (g x)

{-@ incr :: x:Nat -> {v:Nat | v == x + 1} @-}
incr :: Int -> Int
incr x = x + 1

{-@ incr2 :: x:Nat -> {v:Nat | v == x + 2} @-}
incr2 x = twice incr x


{-@ incrrr :: x:{v:Nat| v < 100 } -> {v:Nat | v == x + 1 } @-}
incrrr :: Int -> Int
incrrr x = x + 1

{-@ incrrr2 :: x:{v:Nat| v < 99 } -> {v:Nat | v == x + 2 } @-}
incrrr2 x = twice incrrr x

{-@quad :: forall < fpost :: a -> a -> Bool
              , fpre :: a -> Bool
              , quadpre :: a -> Bool
              , quadpost :: a -> a -> Bool
              >.
        {x::a<quadpre>, y::a<fpost x> |- a<fpost x> <: a<fpre>}
        {x::a<quadpre>, y::a<fpost x>, y2::a<fpost y> |- a<fpost y> <: a<fpre>}
        {x::a<quadpre>, y::a<fpost x>, y2::a<fpost y>, y3::a<fpost y2> |- a<fpost y2> <: a<fpre>}
        {x::a<fpre>, y::a<fpost x>, y2::a<fpost y>, y3::a<fpost y2> |- a<fpost y3> <: a<quadpost x>}
        {x::a<quadpre> |- a<quadpre> <: a<fpre>}
       f:(z:a<fpre> -> a<fpost z>)
    -> x:a<quadpre> -> a<quadpost x>
@-}
quad f x = let g = twice twice f in g x
   

   
{-@ test3 :: x:{v:Nat| v < 97 } -> {v:Nat | v == x + 4 } @-}
test3 x = quad incrrr x

{-@ test4 :: x:{v:Nat| v < 93 } -> {v:Nat | v == x + 8 } @-}
test4 x = quad incrrr2 x

{-@ test5 :: x:{v:Nat| v < 94 } -> {v:Nat | v == x + 8 } @-}
test5 x = quad incrrr2 x

{-@ test6:: x:{v:Nat| v < 93 } -> {v:Nat | v == x + 7 } @-}
test6 x = quad incrrr2 x


 ====================================
  
 quad = twice twice
 foo1 = twice quad  //2^4  (16)
 foo2 = quad twice  //+16  (4^2)
 foo3 = quad quad   //+256  (4^4)
  
==================================================
 twice f x 
	 req twice.pre(f,x)
	 ens twice.post(f,x,res)	
 with relational assumption constraints
     twice.pre(f,x) -> f.pre(x)
  /\ twice.pre(f,x) /\ f.post(x,y) -> f.pre(y)
  /\ twice.pre(f,x) /\ f.post(x,y) /\ f.post(y,r) -> twice.post(f,x,res)


quad f x = 
 	 req quad.pre(f,x)
	 ens quad.post(f,x,res)	
// execution
{ 
  twice (twice) f x
  = (twice) (twice f) x
  = (twice f) (twice f x)
  = f (f (twice f x))
  = f (f (f (f x)))
}

{ 
  // quad.pre(f,x)
  // quad.pre(f,x) --> twice.pre(twice,f)
  // twice twice f
  g = foo f;
  // quad.pref(f,x) /\ twice.post(twice,f,foo)
  // quad.pref(f,x) /\ twice.post(twice,f,foo) -> foo.pre(f)
  g x
  // quad.pref(f,x) /\ twice.post(twice,f,foo) /\ foo.post(x)
}
  
foo f = 
 	 req foo.pre(f)
	 ens foo.post(f,res)	
// execution
{ 
    // foo.pre(f)
	// foo.pre(f) -> twice.pre(twice,f)
    r = twice twice f
	// foo.pre(f) /\ twice.post(twice,f,r)
	return r
    // foo.pre(f) /\ twice.post(twice,f,res) -> foo.post(f,res)
}


==============
Possible a bug:

{-@
foo :: forall < fpost :: a -> a -> Bool
              , fpre :: a -> Bool
              , foopre :: a -> Bool
              , foopost :: a -> a -> Bool
              >.
       {x::a<foopre> |- a<foopre> <: a<fpre>}
       f:(z:a<fpre> -> a<fpost z>)
    -> x:a<foopre> -> {v:a<foopost x> |  v = x }
@-}
foo f = twice twice f


{-@quad :: forall < fpost :: a -> a -> Bool
              , fpre :: a -> Bool
              , quadpre :: a -> Bool
              , quadpost :: a -> a -> Bool
              >.

       {x::a<quadpre> |- a<quadpre> <: a<fpre>}
       
       f:(z:a<fpre> -> a<fpost z>)
    -> x:a<quadpre> -> {v:a<quadpost x> |  v /= x }
@-}
quad f x = foo f x
   

{-@ test3 :: x:{v:Nat| v = 97 } -> {v:Nat | v == 0 - 400 } @-}
test3 x = quad incrrr x